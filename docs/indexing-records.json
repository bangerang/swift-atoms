[{"rawIndexableTextContent":"A unique identifier for the Atom. ","kind":"symbol","title":"id","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/ReadableAtom\/id","interfaceLanguage":"swift"}},"summary":"A unique identifier for the Atom."},{"rawIndexableTextContent":"The current value of the wrapped ReadableAtom. ","kind":"symbol","title":"wrappedValue","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/CaptureAtomValue\/wrappedValue","interfaceLanguage":"swift"}},"summary":"The current value of the wrapped ReadableAtom."},{"rawIndexableTextContent":"The current value of the wrapped WritableAtom. ","kind":"symbol","title":"wrappedValue","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/UseAtom\/wrappedValue","interfaceLanguage":"swift"}},"summary":"The current value of the wrapped WritableAtom."},{"rawIndexableTextContent":" ","kind":"symbol","title":"AtomStore.DebugScope.include(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AtomStore\/DebugScope\/include(_:)","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"Initializes a new instance of AsyncSequenceAtom with the specified AsyncSequence.  An AsyncSequence object that produces values of type T. A boolean value indicating if the atom should be kept alive. Default is false. The source file where the AsyncSequenceAtom is created. Default is #file. The function where the AsyncSequenceAtom is created. Default is #function. The line number in the source file where the AsyncSequenceAtom is created. Default is #line.","kind":"symbol","title":"init(_:keepAlive:file:function:line:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom\/init(_:keepAlive:file:function:line:)-qbn7","interfaceLanguage":"swift"}},"summary":"Initializes a new instance of AsyncSequenceAtom with the specified AsyncSequence."},{"rawIndexableTextContent":"","kind":"article","title":"ReadableAtom Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom\/ReadableAtom-Implementations","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"Registers a callback to be called when the Atom’s value updates.  Return Value The modified ReadableAtom with the onUpdate callback registered. The number of initial values to skip before invoking the callback. Defaults to 0. A closure that is called with the new value when the Atom’s value updates.","kind":"symbol","title":"onUpdate(skip:_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Atom\/onUpdate(skip:_:)","interfaceLanguage":"swift"}},"summary":"Registers a callback to be called when the Atom’s value updates."},{"rawIndexableTextContent":"Initialize a new AsyncAtom with the specified parameters.  A boolean value indicating whether the atom should be kept alive even if no longer used. Default is false. A boolean value indicating whether the atom should throw an error if the task is cancelled. Default is false. The file name where the atom is defined. Default is #file. The function name where the atom is defined. Default is #function. The line number where the atom is defined. Default is #line. An async closure that performs the operation and returns a value of type T or throws an error.","kind":"symbol","title":"init(keepAlive:throwOnCancellation:file:function:line:operation:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncAtom\/init(keepAlive:throwOnCancellation:file:function:line:operation:)","interfaceLanguage":"swift"}},"summary":"Initialize a new AsyncAtom with the specified parameters."},{"rawIndexableTextContent":"Creates an Atom with a default value.  The observable object for the atom. A boolean indicating whether the atom should be kept alive in memory. The file where the atom is declared. The function where the atom is declared. The line number where the atom is declared.","kind":"symbol","title":"init(_:keepAlive:file:function:line:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/init(_:keepAlive:file:function:line:)","interfaceLanguage":"swift"}},"summary":"Creates an Atom with a default value."},{"rawIndexableTextContent":"Initializes a new PublishedAtom with a closure returning a Published<T>.Publisher.  A boolean flag indicating whether the PublishedAtom should be kept alive. Defaults to false. The name of the file where this PublishedAtom is created. Defaults to #file. The name of the function where this PublishedAtom is created. Defaults to #function. The line number in the file where this PublishedAtom is created. Defaults to #line. A closure that returns a Published<T>.Publisher to be wrapped by the PublishedAtom.","kind":"symbol","title":"init(keepAlive:file:function:line:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublishedAtom\/init(keepAlive:file:function:line:_:)","interfaceLanguage":"swift"}},"summary":"Initializes a new PublishedAtom with a closure returning a Published<T>.Publisher."},{"rawIndexableTextContent":"The current value of the wrapped ReadableAtom. ","kind":"symbol","title":"wrappedValue","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/CaptureAtom\/wrappedValue","interfaceLanguage":"swift"}},"summary":"The current value of the wrapped ReadableAtom."},{"rawIndexableTextContent":"A boolean flag indicating whether the GetSetAtom should be kept alive. ","kind":"symbol","title":"keepAlive","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/GetSetAtom\/keepAlive","interfaceLanguage":"swift"}},"summary":"A boolean flag indicating whether the GetSetAtom should be kept alive."},{"rawIndexableTextContent":"Resets the value of the GetSetAtom to the initial state as defined by the custom getter. ","kind":"symbol","title":"reset()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/GetSetAtom\/reset()","interfaceLanguage":"swift"}},"summary":"Resets the value of the GetSetAtom to the initial state as defined by the custom getter."},{"rawIndexableTextContent":"The type of the value managed by this GetSetAtom. ","kind":"symbol","title":"type","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/GetSetAtom\/type","interfaceLanguage":"swift"}},"summary":"The type of the value managed by this GetSetAtom."},{"rawIndexableTextContent":"AtomStore is responsible for injecting mutation closures into the store and enabling logging for Atom operations. It provides a shared singleton instance for convenient access throughout your application. ","kind":"symbol","title":"AtomStore","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AtomStore","interfaceLanguage":"swift"}},"summary":"AtomStore is responsible for injecting mutation closures into the store and enabling logging for Atom operations. It provides a shared singleton instance for convenient access throughout your application."},{"rawIndexableTextContent":"Inherited from ReadableAtom.debugLabel(_:). ","kind":"symbol","title":"debugLabel(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom\/debugLabel(_:)","interfaceLanguage":"swift"}},"summary":"Inherited from ReadableAtom.debugLabel(_:)."},{"rawIndexableTextContent":"A property wrapper that provides an AnyPublisher<T, Never> that emits the current value of the atom and any subsequent updates.  Overview Usage: ","kind":"symbol","title":"CaptureAtomPublisher","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/CaptureAtomPublisher","interfaceLanguage":"swift"}},"summary":"A property wrapper that provides an AnyPublisher<T, Never> that emits the current value of the atom and any subsequent updates."},{"rawIndexableTextContent":"The type of the value managed by the atom. ","kind":"symbol","title":"type","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/type","interfaceLanguage":"swift"}},"summary":"The type of the value managed by the atom."},{"rawIndexableTextContent":"Indicates that the asynchronous operation has completed successfully with the provided Root value. ","kind":"symbol","title":"AsyncState.success(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncState\/success(_:)","interfaceLanguage":"swift"}},"summary":"Indicates that the asynchronous operation has completed successfully with the provided Root value."},{"rawIndexableTextContent":"Registers a callback to be called when the Atom’s value updates.  Return Value The modified ReadableAtom with the onUpdate callback registered. The number of initial values to skip before invoking the callback. Defaults to 0. A closure that is called with the new value when the Atom’s value updates.","kind":"symbol","title":"onUpdate(skip:_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/DerivedAtom\/onUpdate(skip:_:)","interfaceLanguage":"swift"}},"summary":"Registers a callback to be called when the Atom’s value updates."},{"rawIndexableTextContent":"A boolean flag indicating whether the PublishedAtom should be kept alive. ","kind":"symbol","title":"keepAlive","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublishedAtom\/keepAlive","interfaceLanguage":"swift"}},"summary":"A boolean flag indicating whether the PublishedAtom should be kept alive."},{"rawIndexableTextContent":" ","kind":"symbol","title":"AtomStore.DebugScope.exclude(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AtomStore\/DebugScope\/exclude(_:)","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"Inherited from ReadableAtom.debugLabel(_:). ","kind":"symbol","title":"debugLabel(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom\/debugLabel(_:)","interfaceLanguage":"swift"}},"summary":"Inherited from ReadableAtom.debugLabel(_:)."},{"rawIndexableTextContent":"A unique identifier for this PublishedAtom. ","kind":"symbol","title":"id","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublishedAtom\/id","interfaceLanguage":"swift"}},"summary":"A unique identifier for this PublishedAtom."},{"rawIndexableTextContent":"A boolean indicating whether the derived atom should be kept alive in memory. ","kind":"symbol","title":"keepAlive","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/DerivedAtom\/keepAlive","interfaceLanguage":"swift"}},"summary":"A boolean indicating whether the derived atom should be kept alive in memory."},{"rawIndexableTextContent":"A boolean indicating whether the atom should be kept alive in memory. ","kind":"symbol","title":"keepAlive","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/keepAlive","interfaceLanguage":"swift"}},"summary":"A boolean indicating whether the atom should be kept alive in memory."},{"rawIndexableTextContent":"Registers a callback to be called when the Atom’s value updates.  Return Value The modified ReadableAtom with the onUpdate callback registered. The number of initial values to skip before invoking the callback. Defaults to 0. A closure that is called with the new value when the Atom’s value updates.","kind":"symbol","title":"onUpdate(skip:_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/onUpdate(skip:_:)","interfaceLanguage":"swift"}},"summary":"Registers a callback to be called when the Atom’s value updates."},{"rawIndexableTextContent":"Inherited from ReadableAtom.debugLabel(_:). ","kind":"symbol","title":"debugLabel(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Atom\/debugLabel(_:)","interfaceLanguage":"swift"}},"summary":"Inherited from ReadableAtom.debugLabel(_:)."},{"rawIndexableTextContent":"A unique identifier for the PublisherAtom. ","kind":"symbol","title":"id","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom\/id","interfaceLanguage":"swift"}},"summary":"A unique identifier for the PublisherAtom."},{"rawIndexableTextContent":"A generic AsyncAtom represents an asynchronous state for a given value of type T.  Overview AsyncAtom manages an asynchronous operation that produces a value of type T or throws an error. The state is represented as an AsyncState<T>, which can be .loading, .success(T), or .failure(Error). The asynchronous state is automatically updated when the associated operation is performed, and its dependencies change. Example:  Conforms to the ReadableAtom protocol.","kind":"symbol","title":"AsyncAtom","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncAtom","interfaceLanguage":"swift"}},"summary":"A generic AsyncAtom represents an asynchronous state for a given value of type T."},{"rawIndexableTextContent":"Inherited from Equatable.==(_:_:). ","kind":"symbol","title":"==(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncState\/==(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.==(_:_:)."},{"rawIndexableTextContent":"","kind":"article","title":"ReadableAtom Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom\/ReadableAtom-Implementations","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"A test store for running isolated operations on a separate Store instance. ","kind":"symbol","title":"TestStore","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/TestStore","interfaceLanguage":"swift"}},"summary":"A test store for running isolated operations on a separate Store instance."},{"rawIndexableTextContent":"The wrapped ReadableAtom value as an AnyPublisher. ","kind":"symbol","title":"wrappedValue","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/CaptureAtomPublisher\/wrappedValue","interfaceLanguage":"swift"}},"summary":"The wrapped ReadableAtom value as an AnyPublisher."},{"rawIndexableTextContent":"Initializes a new UseAtomValue instance for the given ReadableAtom.  A ReadableAtom instance whose value will be managed by the UseAtomValue. An optional time interval for debouncing the value updates. Default is 0.","kind":"symbol","title":"init(_:debounce:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/UseAtomValue\/init(_:debounce:)","interfaceLanguage":"swift"}},"summary":"Initializes a new UseAtomValue instance for the given ReadableAtom."},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/UseAtomValue\/update()","interfaceLanguage":"swift"}},"summary":"Inherited from DynamicProperty.update().","title":"update()","kind":"symbol","rawIndexableTextContent":"Inherited from DynamicProperty.update(). ","headings":[],"platforms":[{"beta":false,"unavailable":false,"name":"iOS","introducedAt":"13.0","deprecated":false},{"beta":false,"unavailable":false,"name":"macOS","introducedAt":"10.15","deprecated":false},{"beta":false,"unavailable":false,"name":"tvOS","introducedAt":"13.0","deprecated":false},{"beta":false,"unavailable":false,"name":"watchOS","introducedAt":"6.0","deprecated":false}]},{"rawIndexableTextContent":"Initializes a new instance of PublisherAtom with a publisher that never fails.  The publisher that provides values of type T. A boolean value indicating if the PublisherAtom should be kept alive. The file where the PublisherAtom is created. Defaults to the current file. The function where the PublisherAtom is created. Defaults to the current function. The line where the PublisherAtom is created. Defaults to the current line.","kind":"symbol","title":"init(_:keepAlive:file:function:line:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom\/init(_:keepAlive:file:function:line:)","interfaceLanguage":"swift"}},"summary":"Initializes a new instance of PublisherAtom with a publisher that never fails."},{"rawIndexableTextContent":"The unique identifier for the atom. ","kind":"symbol","title":"id","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom\/id","interfaceLanguage":"swift"}},"summary":"The unique identifier for the atom."},{"rawIndexableTextContent":"The unique identifier for the atom. ","kind":"symbol","title":"type","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncAtom\/type","interfaceLanguage":"swift"}},"summary":"The unique identifier for the atom."},{"rawIndexableTextContent":"A generic PublishedAtom represents a readable state for a given value of type T that comes from a Published property wrapper.  Overview PublishedAtom wraps the Published<T>.Publisher of a Published property, and the state is updated automatically when the Published property changes. Example:  Conforms to the ReadableAtom protocol.","kind":"symbol","title":"PublishedAtom","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublishedAtom","interfaceLanguage":"swift"}},"summary":"A generic PublishedAtom represents a readable state for a given value of type T that comes from a Published property wrapper."},{"rawIndexableTextContent":"","kind":"article","title":"ReadableAtom Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/GetSetAtom\/ReadableAtom-Implementations","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"A property wrapper that provides read-only access to the atom’s value, and it’s reactive to changes.  Overview Usage: ","kind":"symbol","title":"UseAtomValue","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/UseAtomValue","interfaceLanguage":"swift"}},"summary":"A property wrapper that provides read-only access to the atom’s value, and it’s reactive to changes."},{"rawIndexableTextContent":"Resets the value of the WillSetAtom to its initial value, optionally running a custom reset closure.  Discussion Use this method to reset the value of the WillSetAtom to its initial value, optionally running a custom reset closure.","kind":"symbol","title":"reset()","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/WillSetAtom\/reset()","interfaceLanguage":"swift"}},"summary":"Resets the value of the WillSetAtom to its initial value, optionally running a custom reset closure."},{"rawIndexableTextContent":"A property wrapper that provides read and write access to the atom’s value, and it’s reactive to changes.  Overview Usage: Usage: ","kind":"symbol","title":"UseAtom","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/UseAtom","interfaceLanguage":"swift"}},"summary":"A property wrapper that provides read and write access to the atom’s value, and it’s reactive to changes."},{"rawIndexableTextContent":"Initializes a new instance of PublisherAtom with a closure that returns a publisher that can fail with an error.  A boolean value indicating if the PublisherAtom should be kept alive. The file where the PublisherAtom is created. Defaults to the current file. The function where the PublisherAtom is created. Defaults to the current function. The line where the PublisherAtom is created. Defaults to the current line. A closure that returns a publisher that provides values of type T and can fail with an error.","kind":"symbol","title":"init(keepAlive:file:function:line:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom\/init(keepAlive:file:function:line:_:)-837kr","interfaceLanguage":"swift"}},"summary":"Initializes a new instance of PublisherAtom with a closure that returns a publisher that can fail with an error."},{"rawIndexableTextContent":" ","kind":"symbol","title":"T","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/ReadableAtom\/T","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"Resets the atom to its default value, optionally executing a callback.  Discussion This method is useful for resetting the atom to its initial state. If a callback is registered, it will be executed before updating the atom’s value.","kind":"symbol","title":"reset()","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Atom\/reset()","interfaceLanguage":"swift"}},"summary":"Resets the atom to its default value, optionally executing a callback."},{"rawIndexableTextContent":"A boolean value indicating if the atom should be kept alive. ","kind":"symbol","title":"keepAlive","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncAtom\/keepAlive","interfaceLanguage":"swift"}},"summary":"A boolean value indicating if the atom should be kept alive."},{"rawIndexableTextContent":"The type of the Atom’s value. ","kind":"symbol","title":"type","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/ReadableAtom\/type","interfaceLanguage":"swift"}},"summary":"The type of the Atom’s value."},{"rawIndexableTextContent":"The Root value associated with the .success case, if any. ","kind":"symbol","title":"value","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncState\/value","interfaceLanguage":"swift"}},"summary":"The Root value associated with the .success case, if any."},{"rawIndexableTextContent":"Inherited from ReadableAtom.debugLabel(_:). ","kind":"symbol","title":"debugLabel(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublishedAtom\/debugLabel(_:)","interfaceLanguage":"swift"}},"summary":"Inherited from ReadableAtom.debugLabel(_:)."},{"rawIndexableTextContent":"Initializes a new instance of AsyncSequenceAtom with the specified closure that returns an AsyncSequence.  A closure that returns an AsyncSequence object that produces values of type T. A boolean value indicating if the atom should be kept alive. Default is false. The source file where the AsyncSequenceAtom is created. Default is #file. The function where the AsyncSequenceAtom is created. Default is #function. The line number in the source file where the AsyncSequenceAtom is created. Default is #line.","kind":"symbol","title":"init(_:keepAlive:file:function:line:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom\/init(_:keepAlive:file:function:line:)-6rh5p","interfaceLanguage":"swift"}},"summary":"Initializes a new instance of AsyncSequenceAtom with the specified closure that returns an AsyncSequence."},{"rawIndexableTextContent":"A unique identifier for the atom. ","kind":"symbol","title":"id","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Atom\/id","interfaceLanguage":"swift"}},"summary":"A unique identifier for the atom."},{"rawIndexableTextContent":"Indicates that the asynchronous operation has failed with the provided Error. ","kind":"symbol","title":"AsyncState.failure(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncState\/failure(_:)","interfaceLanguage":"swift"}},"summary":"Indicates that the asynchronous operation has failed with the provided Error."},{"rawIndexableTextContent":"Store manages the state of all atoms and their dependencies.  Overview It stores the state for atoms, tracks dependencies between them, and updates the state when required. The Store class is the core of the state management system.","kind":"symbol","title":"Store","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Store","interfaceLanguage":"swift"}},"summary":"Store manages the state of all atoms and their dependencies."},{"rawIndexableTextContent":"A unique identifier for the derived atom. ","kind":"symbol","title":"id","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/DerivedAtom\/id","interfaceLanguage":"swift"}},"summary":"A unique identifier for the derived atom."},{"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/UseAtom\/update()","interfaceLanguage":"swift"}},"summary":"Inherited from DynamicProperty.update().","title":"update()","kind":"symbol","rawIndexableTextContent":"Inherited from DynamicProperty.update(). ","headings":[],"platforms":[{"beta":false,"unavailable":false,"name":"iOS","introducedAt":"13.0","deprecated":false},{"beta":false,"unavailable":false,"name":"macOS","introducedAt":"10.15","deprecated":false},{"beta":false,"unavailable":false,"name":"tvOS","introducedAt":"13.0","deprecated":false},{"beta":false,"unavailable":false,"name":"watchOS","introducedAt":"6.0","deprecated":false}]},{"rawIndexableTextContent":"A generic structure that conforms to the WritableAtom and ResettableAtom protocols.  Overview Use WillSetAtom to store values of type T and perform custom logic before updating the stored value. It provides a closure that is called before the stored value is updated. Example:  WillSetAtom is also resettable, meaning that you can reset its value to its initial value, optionally running a custom reset closure.","kind":"symbol","title":"WillSetAtom","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/WillSetAtom","interfaceLanguage":"swift"}},"summary":"A generic structure that conforms to the WritableAtom and ResettableAtom protocols."},{"rawIndexableTextContent":"The Error value associated with the .failure case, if any. ","kind":"symbol","title":"failure","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncState\/failure","interfaceLanguage":"swift"}},"summary":"The Error value associated with the .failure case, if any."},{"rawIndexableTextContent":"A generic Atom represents a state for a given value of type T.  Overview Atom manages a mutable state for a value of type T. Example:  Conforms to the WritableAtom and ResettableAtom protocols.","kind":"symbol","title":"Atom","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Atom","interfaceLanguage":"swift"}},"summary":"A generic Atom represents a state for a given value of type T."},{"rawIndexableTextContent":"","kind":"article","title":"ReadableAtom Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/DerivedAtom\/ReadableAtom-Implementations","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"A boolean indicating whether the atom should be kept alive in memory. ","kind":"symbol","title":"keepAlive","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Atom\/keepAlive","interfaceLanguage":"swift"}},"summary":"A boolean indicating whether the atom should be kept alive in memory."},{"rawIndexableTextContent":"The type of the value managed by the derived atom. ","kind":"symbol","title":"type","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/DerivedAtom\/type","interfaceLanguage":"swift"}},"summary":"The type of the value managed by the derived atom."},{"rawIndexableTextContent":" ","kind":"symbol","title":"debugLabel(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/ReadableAtom\/debugLabel(_:)","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"Registers a callback to be called when the Atom’s value updates.  Return Value The modified ReadableAtom with the onUpdate callback registered. The number of initial values to skip before invoking the callback. Defaults to 0. A closure that is called with the new value when the Atom’s value updates.","kind":"symbol","title":"onUpdate(skip:_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom\/onUpdate(skip:_:)","interfaceLanguage":"swift"}},"summary":"Registers a callback to be called when the Atom’s value updates."},{"rawIndexableTextContent":"Initializes a new instance of WillSetAtom.  A boolean value indicating if the WillSetAtom should be kept alive. The file where the WillSetAtom is created. Defaults to the current file. The function where the WillSetAtom is created. Defaults to the current function. The line where the WillSetAtom is created. Defaults to the current line. A closure that returns the initial value of the WillSetAtom. A closure that is called before updating the stored value. It receives the new value and returns the updated value. Discussion Use this initializer to store values of type T and perform custom logic before updating the stored value. It provides a closure that is called before the stored value is updated.","kind":"symbol","title":"init(keepAlive:file:function:line:_:willSet:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/WillSetAtom\/init(keepAlive:file:function:line:_:willSet:)","interfaceLanguage":"swift"}},"summary":"Initializes a new instance of WillSetAtom."},{"rawIndexableTextContent":"A property wrapper that captures the atom’s value and provides read and write access without being reactive to changes.  Overview Usage: ","kind":"symbol","title":"CaptureAtom","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/CaptureAtom","interfaceLanguage":"swift"}},"summary":"A property wrapper that captures the atom’s value and provides read and write access without being reactive to changes."},{"rawIndexableTextContent":"The type of the value wrapped in the WillSetAtom. ","kind":"symbol","title":"type","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/WillSetAtom\/type","interfaceLanguage":"swift"}},"summary":"The type of the value wrapped in the WillSetAtom."},{"rawIndexableTextContent":"Inherited from ReadableAtom.debugLabel(_:). ","kind":"symbol","title":"debugLabel(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/WillSetAtom\/debugLabel(_:)","interfaceLanguage":"swift"}},"summary":"Inherited from ReadableAtom.debugLabel(_:)."},{"rawIndexableTextContent":"Returns true if the AsyncState is in the .loading case, false otherwise. ","kind":"symbol","title":"loading","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncState\/loading-swift.property","interfaceLanguage":"swift"}},"summary":"Returns true if the AsyncState is in the .loading case, false otherwise."},{"rawIndexableTextContent":"A Binding to the value of the wrapped WritableAtom. ","kind":"symbol","title":"projectedValue","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/UseAtom\/projectedValue","interfaceLanguage":"swift"}},"summary":"A Binding to the value of the wrapped WritableAtom."},{"rawIndexableTextContent":"","kind":"article","title":"DynamicProperty Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/UseAtom\/DynamicProperty-Implementations","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"Inherited from Equatable.!=(_:_:). ","kind":"symbol","title":"!=(_:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncState\/!=(_:_:)","interfaceLanguage":"swift"}},"summary":"Inherited from Equatable.!=(_:_:)."},{"rawIndexableTextContent":"Creates an Atom with a default value.  The default value for the atom. A boolean indicating whether the atom should be kept alive in memory. The file where the atom is declared. The function where the atom is declared. The line number where the atom is declared.","kind":"symbol","title":"init(_:keepAlive:file:function:line:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Atom\/init(_:keepAlive:file:function:line:)","interfaceLanguage":"swift"}},"summary":"Creates an Atom with a default value."},{"rawIndexableTextContent":"","kind":"article","title":"ReadableAtom Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublishedAtom\/ReadableAtom-Implementations","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"Initializes a new instance of PublisherAtom with a publisher that can fail with an error.  The publisher that provides values of type T and can fail with an error. A boolean value indicating if the PublisherAtom should be kept alive. The file where the PublisherAtom is created. Defaults to the current file. The function where the PublisherAtom is created. Defaults to the current function. The line where the PublisherAtom is created. Defaults to the current line.","kind":"symbol","title":"init(publisher:keepAlive:file:function:line:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom\/init(publisher:keepAlive:file:function:line:)","interfaceLanguage":"swift"}},"summary":"Initializes a new instance of PublisherAtom with a publisher that can fail with an error."},{"rawIndexableTextContent":"A Boolean value indicating whether the Atom should be kept alive. ","kind":"symbol","title":"keepAlive","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/ReadableAtom\/keepAlive","interfaceLanguage":"swift"}},"summary":"A Boolean value indicating whether the Atom should be kept alive."},{"rawIndexableTextContent":"A generic GetSetAtom represents a readable and writable state for a given value of type T.  Overview GetSetAtom manages a custom getter and setter for the value of type T. The state is updated automatically when any of its dependencies change. Example:  Conforms to the WritableAtom and ResettableAtom protocols.","kind":"symbol","title":"GetSetAtom","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/GetSetAtom","interfaceLanguage":"swift"}},"summary":"A generic GetSetAtom represents a readable and writable state for a given value of type T."},{"rawIndexableTextContent":"Initializes a new TestStore and runs the specified operation on a separate Store instance.  An asynchronous closure that takes a Store instance and performs the desired operations.","kind":"symbol","title":"init(operation:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/TestStore\/init(operation:)","interfaceLanguage":"swift"}},"summary":"Initializes a new TestStore and runs the specified operation on a separate Store instance."},{"rawIndexableTextContent":"Initializes a new PublishedAtom with a Published<T>.Publisher.  A Published<T>.Publisher to be wrapped by the PublishedAtom. A boolean flag indicating whether the PublishedAtom should be kept alive. Defaults to false.","kind":"symbol","title":"init(_:keepAlive:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublishedAtom\/init(_:keepAlive:)","interfaceLanguage":"swift"}},"summary":"Initializes a new PublishedAtom with a Published<T>.Publisher."},{"rawIndexableTextContent":"The type of the value wrapped in the AsyncState. ","kind":"symbol","title":"type","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom\/type","interfaceLanguage":"swift"}},"summary":"The type of the value wrapped in the AsyncState."},{"rawIndexableTextContent":"Indicates that the asynchronous operation is in progress. ","kind":"symbol","title":"AsyncState.loading","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncState\/loading-swift.enum.case","interfaceLanguage":"swift"}},"summary":"Indicates that the asynchronous operation is in progress."},{"rawIndexableTextContent":"The type of the value managed by the atom. ","kind":"symbol","title":"type","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Atom\/type","interfaceLanguage":"swift"}},"summary":"The type of the value managed by the atom."},{"rawIndexableTextContent":"An enum representing the state of an asynchronous operation. ","kind":"symbol","title":"AsyncState","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncState","interfaceLanguage":"swift"}},"summary":"An enum representing the state of an asynchronous operation."},{"rawIndexableTextContent":"Registers a callback to be called when the Atom’s value updates.  Return Value The modified ReadableAtom with the onUpdate callback registered. The number of initial values to skip before invoking the callback. Defaults to 0. A closure that is called with the new value when the Atom’s value updates.","kind":"symbol","title":"onUpdate(skip:_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom\/onUpdate(skip:_:)","interfaceLanguage":"swift"}},"summary":"Registers a callback to be called when the Atom’s value updates."},{"rawIndexableTextContent":"Initializes a new GetSetAtom with custom getter and setter functions for the value of type T.  A boolean flag indicating whether the GetSetAtom should be kept alive. Defaults to false. The name of the file where this GetSetAtom is created. Defaults to #file. The name of the function where this GetSetAtom is created. Defaults to #function. The line number in the file where this GetSetAtom is created. Defaults to #line. The custom getter function that retrieves the current value of type T. The custom setter function that sets the new value of type T.","kind":"symbol","title":"init(keepAlive:file:function:line:get:set:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/GetSetAtom\/init(keepAlive:file:function:line:get:set:)","interfaceLanguage":"swift"}},"summary":"Initializes a new GetSetAtom with custom getter and setter functions for the value of type T."},{"rawIndexableTextContent":"Enables or disables logging for Atom operations.  Return Value The modified store with the logging setting applied. An optional AtomStore.DebugScope value to specify the logging scope. Defaults to nil. A Boolean value that indicates whether logging should be enabled (true) or disabled (false). Defaults to true. Discussion ","kind":"symbol","title":"enableAtomLogging(_:enabled:)","headings":["Return Value","Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AtomStore\/enableAtomLogging(_:enabled:)","interfaceLanguage":"swift"}},"summary":"Enables or disables logging for Atom operations."},{"rawIndexableTextContent":"","kind":"article","title":"ReadableAtom Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/WillSetAtom\/ReadableAtom-Implementations","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"Reloads the async operation, updating the atom’s state. ","kind":"symbol","title":"reload()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncAtom\/reload()","interfaceLanguage":"swift"}},"summary":"Reloads the async operation, updating the atom’s state."},{"rawIndexableTextContent":"Registers a callback to be called when the Atom’s value updates.  Return Value The modified ReadableAtom with the onUpdate callback registered. The number of initial values to skip before invoking the callback. Defaults to 0. A closure that is called with the new value when the Atom’s value updates.","kind":"symbol","title":"onUpdate(skip:_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncAtom\/onUpdate(skip:_:)","interfaceLanguage":"swift"}},"summary":"Registers a callback to be called when the Atom’s value updates."},{"rawIndexableTextContent":"Inherited from ReadableAtom.debugLabel(_:). ","kind":"symbol","title":"debugLabel(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/GetSetAtom\/debugLabel(_:)","interfaceLanguage":"swift"}},"summary":"Inherited from ReadableAtom.debugLabel(_:)."},{"rawIndexableTextContent":"Inherited from ReadableAtom.debugLabel(_:). ","kind":"symbol","title":"debugLabel(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/DerivedAtom\/debugLabel(_:)","interfaceLanguage":"swift"}},"summary":"Inherited from ReadableAtom.debugLabel(_:)."},{"rawIndexableTextContent":"","kind":"article","title":"ReadableAtom Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Atom\/ReadableAtom-Implementations","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"A unique identifier for this GetSetAtom. ","kind":"symbol","title":"id","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/GetSetAtom\/id","interfaceLanguage":"swift"}},"summary":"A unique identifier for this GetSetAtom."},{"rawIndexableTextContent":"A Boolean value that indicates whether logging is enabled for Atom operations. Defaults to false. ","kind":"symbol","title":"loggingEnabled","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AtomStore\/loggingEnabled","interfaceLanguage":"swift"}},"summary":"A Boolean value that indicates whether logging is enabled for Atom operations. Defaults to false."},{"rawIndexableTextContent":"Registers a callback to be called when the Atom’s value updates.  Return Value The modified ReadableAtom with the onUpdate callback registered. The number of initial values to skip before invoking the callback. Defaults to 0. A closure that is called with the new value when the Atom’s value updates.","kind":"symbol","title":"onUpdate(skip:_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublishedAtom\/onUpdate(skip:_:)","interfaceLanguage":"swift"}},"summary":"Registers a callback to be called when the Atom’s value updates."},{"rawIndexableTextContent":"Inherited from ReadableAtom.debugLabel(_:). ","kind":"symbol","title":"debugLabel(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncAtom\/debugLabel(_:)","interfaceLanguage":"swift"}},"summary":"Inherited from ReadableAtom.debugLabel(_:)."},{"rawIndexableTextContent":"","kind":"article","title":"ReadableAtom Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncAtom\/ReadableAtom-Implementations","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"A flag indicating if the WillSetAtom should be kept alive. ","kind":"symbol","title":"keepAlive","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/WillSetAtom\/keepAlive","interfaceLanguage":"swift"}},"summary":"A flag indicating if the WillSetAtom should be kept alive."},{"rawIndexableTextContent":"A unique identifier for the atom. ","kind":"symbol","title":"id","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/id","interfaceLanguage":"swift"}},"summary":"A unique identifier for the atom."},{"rawIndexableTextContent":"Cancel the current async operation. ","kind":"symbol","title":"cancel()","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncAtom\/cancel()","interfaceLanguage":"swift"}},"summary":"Cancel the current async operation."},{"rawIndexableTextContent":"A boolean value indicating if the atom should be kept alive. ","kind":"symbol","title":"keepAlive","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom\/keepAlive","interfaceLanguage":"swift"}},"summary":"A boolean value indicating if the atom should be kept alive."},{"rawIndexableTextContent":"Injects a custom value for a specific ReadableAtom.  The ReadableAtom you want to inject a custom value for. A closure that returns the custom value for the specified atom. Discussion This method is useful for testing or mocking purposes. It allows you to provide a custom value for an atom, overriding its actual state.","kind":"symbol","title":"inject(_:mutation:)","headings":["Discussion"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/Store\/inject(_:mutation:)","interfaceLanguage":"swift"}},"summary":"Injects a custom value for a specific ReadableAtom."},{"rawIndexableTextContent":"","kind":"article","title":"ReadableAtom Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/ReadableAtom-Implementations","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"The shared singleton instance of AtomStore. ","kind":"symbol","title":"shared","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AtomStore\/shared","interfaceLanguage":"swift"}},"summary":"The shared singleton instance of AtomStore."},{"rawIndexableTextContent":"Registers a callback to be called when the Atom’s value updates.  Return Value The modified ReadableAtom with the onUpdate callback registered. The number of initial values to skip before invoking the callback. Defaults to 0. A closure that is called with the new value when the Atom’s value updates.","kind":"symbol","title":"onUpdate(skip:_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/GetSetAtom\/onUpdate(skip:_:)","interfaceLanguage":"swift"}},"summary":"Registers a callback to be called when the Atom’s value updates."},{"rawIndexableTextContent":"","kind":"article","title":"DynamicProperty Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/UseAtomValue\/DynamicProperty-Implementations","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"Initializes a new CaptureAtomPublisher instance for the given ReadableAtom.  A ReadableAtom instance whose value will be captured by the CaptureAtomPublisher.","kind":"symbol","title":"init(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/CaptureAtomPublisher\/init(_:)","interfaceLanguage":"swift"}},"summary":"Initializes a new CaptureAtomPublisher instance for the given ReadableAtom."},{"rawIndexableTextContent":"A flag indicating if the PublisherAtom should be kept alive. ","kind":"symbol","title":"keepAlive","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom\/keepAlive","interfaceLanguage":"swift"}},"summary":"A flag indicating if the PublisherAtom should be kept alive."},{"rawIndexableTextContent":"Injects a mutation closure for a given ReadableAtom into the store.  Return Value The modified AtomStore with the mutation closure injected. A ReadableAtom instance whose value will be mutated by the provided closure. A closure that returns the new value for the ReadableAtom.","kind":"symbol","title":"inject(_:mutation:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AtomStore\/inject(_:mutation:)","interfaceLanguage":"swift"}},"summary":"Injects a mutation closure for a given ReadableAtom into the store."},{"rawIndexableTextContent":"The type of the state managed by the atom, which is AsyncState<T>. ","kind":"symbol","title":"type","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom\/type","interfaceLanguage":"swift"}},"summary":"The type of the state managed by the atom, which is AsyncState<T>."},{"rawIndexableTextContent":"A property wrapper that captures the atom’s value and provides read-only access without being reactive to changes.  Overview Usage: ","kind":"symbol","title":"CaptureAtomValue","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/CaptureAtomValue","interfaceLanguage":"swift"}},"summary":"A property wrapper that captures the atom’s value and provides read-only access without being reactive to changes."},{"rawIndexableTextContent":"Creates a DerivedAtom with a closure that computes the derived value.  A boolean indicating whether the derived atom should be kept alive in memory. The file where the derived atom is declared. The function where the derived atom is declared. The line number where the derived atom is declared. A closure that computes the derived value based on other atom values.","kind":"symbol","title":"init(keepAlive:file:function:line:get:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/DerivedAtom\/init(keepAlive:file:function:line:get:)","interfaceLanguage":"swift"}},"summary":"Creates a DerivedAtom with a closure that computes the derived value."},{"rawIndexableTextContent":"The type of the value managed by this PublishedAtom. ","kind":"symbol","title":"type","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublishedAtom\/type","interfaceLanguage":"swift"}},"summary":"The type of the value managed by this PublishedAtom."},{"rawIndexableTextContent":"Inherited from ReadableAtom.debugLabel(_:). ","kind":"symbol","title":"debugLabel(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom\/debugLabel(_:)","interfaceLanguage":"swift"}},"summary":"Inherited from ReadableAtom.debugLabel(_:)."},{"rawIndexableTextContent":"A unique identifier for the WillSetAtom. ","kind":"symbol","title":"id","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/WillSetAtom\/id","interfaceLanguage":"swift"}},"summary":"A unique identifier for the WillSetAtom."},{"rawIndexableTextContent":"The current value of the wrapped WritableAtom. ","kind":"symbol","title":"wrappedValue","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/UseAtomValue\/wrappedValue","interfaceLanguage":"swift"}},"summary":"The current value of the wrapped WritableAtom."},{"rawIndexableTextContent":"Initializes a new CaptureAtomValue instance for the given ReadableAtom.  A ReadableAtom instance whose value will be managed by the CaptureAtomValue.","kind":"symbol","title":"init(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/CaptureAtomValue\/init(_:)","interfaceLanguage":"swift"}},"summary":"Initializes a new CaptureAtomValue instance for the given ReadableAtom."},{"rawIndexableTextContent":"Registers a callback to be called when the Atom’s value updates.  Return Value The modified ReadableAtom with the onUpdate callback registered. The number of initial values to skip before invoking the callback. Defaults to 0. A closure that is called with the new value when the Atom’s value updates.","kind":"symbol","title":"onUpdate(skip:_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/WillSetAtom\/onUpdate(skip:_:)","interfaceLanguage":"swift"}},"summary":"Registers a callback to be called when the Atom’s value updates."},{"rawIndexableTextContent":"A generic PublisherAtom represents a readable state for a given value of type T that comes from a Publisher.  Overview PublisherAtom wraps an AnyPublisher<T, Never> or AnyPublisher<T, Error> and automatically updates the state as new values are received from the publisher. The state is represented as an AsyncState<T>, which can be .loading, .success(T), or .failure(Error). Example:  Conforms to the ReadableAtom protocol.","kind":"symbol","title":"PublisherAtom","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom","interfaceLanguage":"swift"}},"summary":"A generic PublisherAtom represents a readable state for a given value of type T that comes from a Publisher."},{"rawIndexableTextContent":"","kind":"symbol","title":"Atoms","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"Initializes a new CaptureAtom instance for the given WritableAtom.  A WritableAtom instance whose value will be captured by the CaptureAtom.","kind":"symbol","title":"init(_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/CaptureAtom\/init(_:)","interfaceLanguage":"swift"}},"summary":"Initializes a new CaptureAtom instance for the given WritableAtom."},{"rawIndexableTextContent":"A generic AsyncSequenceAtom represents an asynchronous state for a given value of type T while iterating through an AsyncSequence.  Overview AsyncSequenceAtom manages the state of an asynchronous sequence producing values of type T or throwing an error. The state is represented as an AsyncState<T>, which can be .loading, .success(T), or .failure(Error). Example:  Conforms to the ReadableAtom protocol.","kind":"symbol","title":"AsyncSequenceAtom","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncSequenceAtom","interfaceLanguage":"swift"}},"summary":"A generic AsyncSequenceAtom represents an asynchronous state for a given value of type T while iterating through an AsyncSequence."},{"rawIndexableTextContent":"The unique identifier for the atom. ","kind":"symbol","title":"id","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncAtom\/id","interfaceLanguage":"swift"}},"summary":"The unique identifier for the atom."},{"rawIndexableTextContent":"Specifies the logging scope for AtomStore debugging purposes.  Overview Cases: include([any ReadableAtom]): Enables logging for the specified ReadableAtom instances. exclude([any ReadableAtom]): Disables logging for the specified ReadableAtom instances.","kind":"symbol","title":"AtomStore.DebugScope","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AtomStore\/DebugScope","interfaceLanguage":"swift"}},"summary":"Specifies the logging scope for AtomStore debugging purposes."},{"rawIndexableTextContent":"Registers a callback to be called when the Atom’s value updates.  Return Value The modified ReadableAtom with the onUpdate callback registered. The number of initial values to skip before invoking the callback. Defaults to 0. A closure that is called with the new value when the Atom’s value updates.","kind":"symbol","title":"onUpdate(skip:_:)","headings":["Return Value"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/ReadableAtom\/onUpdate(skip:_:)","interfaceLanguage":"swift"}},"summary":"Registers a callback to be called when the Atom’s value updates."},{"rawIndexableTextContent":"Initializes a new instance of PublisherAtom with a closure that returns a publisher that never fails.  A boolean value indicating if the PublisherAtom should be kept alive. The file where the PublisherAtom is created. Defaults to the current file. The function where the PublisherAtom is created. Defaults to the current function. The line where the PublisherAtom is created. Defaults to the current line. A closure that returns a publisher that provides values of type T.","kind":"symbol","title":"init(keepAlive:file:function:line:_:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/PublisherAtom\/init(keepAlive:file:function:line:_:)-2ldm0","interfaceLanguage":"swift"}},"summary":"Initializes a new instance of PublisherAtom with a closure that returns a publisher that never fails."},{"rawIndexableTextContent":"A protocol that represents a writable Atom with a value of a certain type T. ","kind":"symbol","title":"WritableAtom","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/WritableAtom","interfaceLanguage":"swift"}},"summary":"A protocol that represents a writable Atom with a value of a certain type T."},{"rawIndexableTextContent":"Initializes a new UseAtom instance for the given WritableAtom.  A WritableAtom instance whose value will be managed by the UseAtom. An optional time interval for debouncing the value updates. Default is 0.","kind":"symbol","title":"init(_:debounce:)","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/UseAtom\/init(_:debounce:)","interfaceLanguage":"swift"}},"summary":"Initializes a new UseAtom instance for the given WritableAtom."},{"rawIndexableTextContent":"A generic DerivedAtom represents a derived state for a given value of type T.  Overview DerivedAtom manages a read-only state derived from other atom states. The derived state is automatically updated when any of its dependencies change. Example:  Conforms to the ReadableAtom protocol.","kind":"symbol","title":"DerivedAtom","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/DerivedAtom","interfaceLanguage":"swift"}},"summary":"A generic DerivedAtom represents a derived state for a given value of type T."},{"rawIndexableTextContent":"An ObservableObjectAtom represents a readable state for a given value of type T that conforms to ObservableObject.  Overview ObservableObjectAtom wraps a value of type T and updates the state when the wrapped object’s objectWillChange publisher sends an event. This can be used for more advanced state management, as it allows you to handle state inside the ObservableObject Usage: ","kind":"symbol","title":"ObservableObjectAtom","headings":["Overview"],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/ObservableObjectAtom","interfaceLanguage":"swift"}},"summary":"An ObservableObjectAtom represents a readable state for a given value of type T that conforms to ObservableObject."},{"rawIndexableTextContent":"","kind":"article","title":"Equatable Implementations","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/AsyncState\/Equatable-Implementations","interfaceLanguage":"swift"}},"summary":""},{"rawIndexableTextContent":"A protocol that represents a readable Atom with a value of a certain type T. ","kind":"symbol","title":"ReadableAtom","headings":[],"location":{"type":"topLevelPage","reference":{"url":"doc:\/\/Atoms\/documentation\/Atoms\/ReadableAtom","interfaceLanguage":"swift"}},"summary":"A protocol that represents a readable Atom with a value of a certain type T."}]